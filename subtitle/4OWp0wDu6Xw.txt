好 各位同學大家好
那我們來繼續上課吧
好那接下來啊我們要進入一個
新的主題 我們要講生成這件事情
好那生成有什麼樣特別的地方呢
到目前為止啊大家學到的network
都是一個function
你給他一個X就可以輸出一個Y
我們已經學到各式各樣的
network架構
可以處理不同的X 不同的Y
我們已經學到輸入的X
如果是一張圖片的時候怎麼辦
我們也學到輸入的X
如果是一個sequence的時候怎麼辦
我們也學到輸出的Y可以是一個數值
可以是一個類別
也可以是一個sequence
那我們目前有講過的network架構
其實應該可以涵括多數
你日後會遇到的問題了
那接下來呢我們要進入一個新的主題
這個新的主題是要把network
當做一個generator來用
我們要把network拿來做深層使用
那把network拿來
當作generator使用
有什麼樣特別的地方呢
他特別的地方是現在network的輸入
會加上一個random的variable
會加上一個Z 那這個Z呢
是從某一個
distribution sample出來的
所以現在network它不是只看
一個固定的X得到輸出
它是同時看X跟Z得到輸出
那你可能會問說
network怎麼同時看X跟Z呢
那這個有很多不同的做法啦
就看你怎樣設計你的network架構
舉例來說你可以說X是個向量
Z是個向量 兩個向量直接接起來
變成一個比較長的向量
就當作network的input這樣可以嗎
這樣可以
或者是你的X跟Z正好長度一模一樣
把它們相加以後
當做network的input
這樣可以嗎 這樣可以
好那Z特別的地方是 它是不固定的
每一次我們用這個network的時候
都會隨機生成一個Z
所以Z每次都不一樣
它是從一個distribution裡面
sample出來的
那這個distribution
這邊有一個限制是
它必須夠簡單 什麼叫夠簡單呢
這邊夠簡單的意思是
我們知道它的式子長什麼樣子
我們可以從這個distribution
去做sample
舉例來說這個distribution
可以是一個function distribution
你知道function distribution的式子
你知道怎麼從
gaussian distribution做sample
它也可以是uniform distribution
那uniform distribution
的式子你一定知道
你也知道怎麼從
uniform distribution做sample
所以這一個distribution
的形狀你自己決定
但你只要記得說它是簡單的
你能夠sample它的 就結束了
好所以每次今天
有一個X進來的時候
你都從這個distribution
裡面做一個sample
然後得到一個output
隨著你sample到的Z不同
Y的輸出也就不一樣
所以這個時候我們的network輸出
不再是單一一個固定的東西
而變成了一個複雜的distribution
同樣的X作為輸入
我們這邊每次sample到
不一樣的東西
通過一個複雜的network轉換以後
它就會變成一個複雜的分布
你的network的輸出
就變成了一個distribution
那這種可以輸出
一個distribution的network
我們就叫它generator
接下來我們就是要講
怎麼訓練出這種generator
那在講怎麼訓練出generator之前啊
我們第一個想要回答的問題是
為什麼我們需要訓練generator
為什麼我們需要generator
輸入X輸出Y
這樣固定的輸入跟輸出關係不好嗎
為什麼需要輸出是一個分布呢
所以以下就舉一個例子來跟你說明
為什麼輸出有時候需要是一個分布
好 那這邊舉的例子啊
是video prediction
就是給機器一段的影片
然後它要預測接下來會發生什麼事情
那這個例子呢
是我從上面這個
github的連結找到的
那在這個連結裡面 它要做的事情呢
是去預測小精靈這個遊戲
接下來的遊戲畫面會長什麼樣子
不知道小精靈是什麼的人呢
這個就是小精靈一個真實的遊戲畫面
好 那要怎麼做到
video prediction呢
那你就給你的network
過去的遊戲畫面
然後它的輸出就是新的遊戲畫面
下一秒的下一個時間點的遊戲畫面
就結束了
要得到這樣的訓練資料一點都不困難
你只要不斷的去錄製
有人在玩小精靈的畫面
然後你就可以知道說
給定這三個frames
接下來會發生什麼事
你的訓練資料裡面有嘛
你有一堆錄製的影片就知道說
給定過去的資訊接下來會發生什麼事
你就可以訓練你的network
讓它輸出的Y跟我們目標越接近越好
就結束了
有人可能會問說怎麼輸出一張圖片
這個一張圖片就是一個很長的向量啊
所以你只要讓你的network
可以輸出一個很長的向量
然後這個向量整理成圖片以後
跟你的目標越接近越好 就結束了
好那其實在這個github裡面呢
它不是直接把整個畫面當做輸入啦
它是從畫面裡面只切一小塊當做輸入
就它把這整個畫面切成很多塊
然後分開來處理
不過我們這邊為了簡化說明
就當作network是一次
輸入一整個這樣的畫面
好 但是這樣會有什麼問題呢
如果你用剛才的方法
用我們學過的
network training的方法
Supervise learning train下去
你得到的結果可能會是這個樣子
這個是機器預測出來的結果
所以你看有點模模糊糊的
而且中間還會變換角色
神奇的是那個小精靈啊
走著走著 居然就分裂了
它走到轉角的時候
看它走到轉角的時候就分裂成兩隻了
走到這邊又再分裂成兩隻了
有時候走著走著還會消失
為什麼小精靈走著走著就分裂了呢
那因為今天呢對這個network而言
在訓練資料裡面同樣的輸入
有時候同樣的轉角
有時候小精靈是往左轉
有時候小精靈是往右轉
這樣這兩種可能性
同時存在你的訓練資料裡面
你在訓練的時候
今天你的network
得到的訓練的指示是
給定這一段輸入
那今天得到這一筆訓練資料
那它就要學到給定這段輸入
輸出應該要往右轉
給定這一些訓練資料
有時候你會看到的是向左轉
那機器就會學到給定這一段輸入
它要向左轉
但是這兩種訓練資料 很有可能
同時都存在你的訓練機裡面
所以你的network
學到的就是兩面討好
因為它需要得到一個輸出
這個輸出同時距離向左轉最近
同時也距離向右轉最近
那怎麼樣同時距離向左轉最近
向右轉最近呢
也許就是同時向左也向右轉
所以你的network
它就會得到一個錯誤的結果
向左轉是對的 向右轉也是對的
但是同時向左向右轉 反而是不對的
那有什麼樣的可能性
可以處理這個問題呢
一個可能性就是
讓機器的輸出是有機率的
讓它不再是輸出單一的輸出
讓它輸出一個機率的分佈
當我們給這個network
一個distribution的時候
當我們給這個network input
加上一個Z的時候
它的輸出就變成了一個distribution
它的輸出就不再是固定的
我們希望訓練一個network
它可以知道說它的輸出的這個分佈
包含了向左轉的可能
也包含向右轉的可能
舉例來說假設你選擇你的Z啊
是一個比如說
binary的random variable
它就只有0跟1 那可能各佔50%
也許你的network就可以學到說
Z sample到1的時候就向左轉
Z sample到0的時候就向右轉
這樣子就可以解決
這個世界有很多不可預測的東西
這樣子的狀況
那什麼時候我們會特別需要
處理這種問題呢
什麼時候
我們會特別需要這種
generator的model呢
當我們的任務需要一點創造力的時候
當然任務需要一點創造力這件事情
是比較擬人化的講法
更具體一點的講法就是
我們想要找一個function
但是同樣的輸入有多種可能的輸出
而這些不同的輸出都是對的
那同樣的輸入有多種不同可能的輸出
你就需要就每個人都可以各自發揮嘛
就算是人來處理這個問題
可能每個人答案也都不一樣
這個時候 就是說
讓機器具有創造的能力
那麼舉一個例子 舉例來說
畫圖這件事情
可能就需要一些創造力
舉例來說假設叫一個人
畫一個紅眼睛的角色
那每個人可能畫出來
或者心裡想的動畫人物可能都不一樣
有哪些角色是紅眼睛的呢
舉例來說庫拉皮卡是紅眼睛的
它是窟盧塔族的
窟盧塔族的憤怒以後呢
就會有火紅眼
那輝夜呢也是紅眼睛的
那因為呢這個庫拉皮卡從黑暗大陸
回來以後 就用他在黑暗大陸
得到的資源成立了四宮集團
輝夜其實是庫拉皮卡的子孫
那她那一代呢火紅眼變成是顯性的
不用生氣火紅眼也會顯現出來
所以庫拉皮卡跟輝夜呢
他們都有火紅眼
所以同樣要畫一個紅眼睛的角色
每個人心裡想像的紅眼睛的角色
都是不一樣的 那這個時候
我們就需要讓機器能夠
讓我們的model
能夠output一個distribution
那還有什麼樣的例子
會需要用到創造力呢
舉例來說 對話這件事情
假設你要訓練一個聊天機器人
可能就需要一些創造力
舉例來說假設你跟另外一個人說
你知道輝夜是誰嗎
其實有很多不同的答案對不對
輝夜她是秀知院的學生會部會長
最近跟會長做了一些不可描述的事情
我沒有說是什麼事情
所以也不算是爆雷
但是我們知道說輝夜
其實還有另外一個成就
其實雖然說輝夜姬
這個動畫還沒有完結
但是他的後傳其實已經演完了
後來白銀呢英年早逝所以輝夜
就把自己的頭髮染白
她為了想要離開傷心的地球
就坐著太空船到另外一個星球
另外一個星球呢也有一些原始的生命
那些生命跟人類長得也是挺像的
他們還過著農耕的生活
然後輝夜看到其中一個小國的國王呢
長得跟白銀有點像
所以她就跟那個小國國王在一起
她們生下了一個小孩就是六道仙人
於是就開創了忍者時代
真是可喜可賀 可喜可賀這樣子
所以我們今天學到什麼事呢
我們今天就是學到說
這個輝夜大小姐這個動畫啊
它真是一個了不起的動畫
它其實是在兩部大長篇中間的小品
它既是獵人的後傳
也是火影忍者的前傳
這三個故事是可以串在一起的
就是這麼回事
所以我們對機器說一句話
問它說輝夜是誰
其實每個人也可能都有不同的答案
這個時候我們就需要
generative的model
好當然generative的model
其中一個非常知名的呢
就是generative adversarial network
它的縮寫 是GAN
那我們這一堂課呢主要就是介紹
generative adversarial network
好那介紹generative
adversarial network之前呢
我們就遇到一個問題啊
就是GAN要怎麼唸呢
Google小姐唸起來是這個樣子的啦
“GAN GAN GAN”
好就ㄍㄢˋ四聲啦嘿就是這麼回事
好 那這個ㄍㄢˋ四聲呢這個GAN呢
它其實有很多各式各樣的變形
你可以在網路上呢找到
一個GAN的動物園
找到一個GAN的zoo
那個GAN的動物園裡面呢
蒐集了超過五百種以上的GAN
那你知道每次有人發明了
一個新的GAN的時候
他就會在前面加一個英文的字母
那但是你知道英文的字母是有限的啊
很快的英文的字母就被用盡了
舉例來說在GAN的動物園裡面
至少就有六種的SGAN
它們都是不同的東西
但它們通通被叫做SGAN
甚至還發生了這樣子的狀況
有一篇paper他提出來的叫做
“Variational auto-encoding GAN”
照理說應該所寫成
AEGAN或者是AGAN
但是作者呢加了一個註解說
哎呀AEGAN被別人用了啦
所有的英文字母
看起來都被別人用了啦
我只好叫做α-GAN這樣子
沒有錯 GAN呢實在太多了
所以就會發生這種狀況
而且你還可以跟你的同學比說
誰可以記得最多GAN的名字
然後從A唸到Z這樣
好那我們現在等一下要舉的例子啊
就是要讓機器生成動畫人物的
二次元人物的臉
那等一下我們舉的例子呢是
Unconditional的generation
什麼叫unconditional generation呢
就是我們這邊先把X拿掉
那之後我們在講到conditional
generation的時候
我們會再把X加回來
這邊呢先把X拿掉
所以我們的generator它輸入就是Z
它的輸出就是Y
那輸入的這個Z是什麼呢
我們等一下都假設Z呢
是一個normal distribution
Z是從一個normal distribution
sample出來的向量
那這個向量呢通常會是一個
low-dimensional的向量
它的維度其實是你自訂的啦
你自己決定的啦
那通常你就訂個50啦100啊
這樣子的大小
它是你自己決定的
好你從這邊Z呢
你從這個normal distribution
裡面呢sample一個向量以後
丟到generator裡面
Generator就給你一個對應的輸出
那我們希望對應的輸出
就是一個二次元人物的臉
那到底generator要輸出
怎麼樣的東西
才會變成一個二次元人物的人臉呢
其實這個問題沒有你想像的那麼困難
一張圖片就是一個非常高維的向量
所以generator實際上做的事情
就是產生一個非常高維的向量
舉例來說 假設這是一個64X64
然後彩色的圖片
那你的generator輸出就是64X64X3
那麼長的向量 把那個向量整理一下
就變成一張二次元人物
這個就是generator要做的事情
當你輸入的向量不同的時候
你的輸出就會跟著改變
所以你從這個
normal distribution裡面
Sample Z出來 Sample到不同的Z
那你輸出來的Y都不一樣
那我們希望說不管你這邊sample到什麼Z
輸出來的都是動畫人物的臉
那講到這邊可能有同學會問說
這邊為什麼是
normal distribution呢
不能是別的嗎 可以是別的
這邊選別的你其實也會問同樣的問題
就是了啦
那我的經驗是不同的
distribution之間的差異
可能並沒有真的非常大
不過你還是可以找到一些文獻
試著去探討不同的distribution之間
有沒有差異
但是這邊其實你只要選一個
夠簡單的distribution就行
因為你的generator會想辦法
把這個簡單的distribution
對應到一個複雜的distribution
所以你可以把選擇
distribution這件事情
交給你的generator來處理
那這邊我們在等一下的討論裡面
都假設是一個
normal distribution就好了
好那在GAN裡面
一個特別的地方就是
除了generator以外
我們要多訓練一個東西
這個東西呢叫做discriminator
好那這個discriminator
是做什麼的呢
這個discriminator它的作用是
它會拿一張圖片作為輸入
那它的輸出是什麼呢
它的輸出是一個數值
這個discriminator本身呢
也是一個neural network
它就是一個function
它輸入一個東西會輸出一個東西
它輸入一張圖片 它的輸出是什麼
它的輸出就是一個數字
它輸出就是一個scalar
這個scalar越大就代表說
現在輸入的這張圖片
越像是真實的二次元人物的圖像
好舉例來說這個是二次元人物的頭像
那就輸出1 假設1是最大的值啦
那這個也是畫得很好的就輸出1
這個不知道在畫什麼就輸出0.1
這是discriminator的工作
那至於discriminator的
neural network的架構啊
這也完全是你自己設計的
所以generator
它是個neural network
Discriminator
也是個neural network
他們的架構長什麼樣子
你完全可以自己設計
你可以用CNN 你可以用
transformer 都可以
只要你能夠產生出你要的輸入輸出
就可以了
那在這個例子裡面
像discriminator
因為輸入是一張圖片
你很顯然會選擇CNN對不對
CNN在處理影像上有非常大的優勢
既然輸入是一張圖片
那你的discriminator很有可能
裡面會有大量的CNN的架構
那至於實際上要用什麼樣的架構
這完全是問你自己
完全可以自己決定
好那GAN的基礎的概念是什麼呢
為什麼要多一個discriminator呢
這邊呢就講一個故事
這個故事呢跟演化是有關的
這是什麼呢 這不是一片枯葉
它其實枯葉蝶的擬態
那枯葉蝶呢長得跟枯葉非常像
它可以躲避天敵
那枯葉蝶的祖先呢
其實也不是長得像枯葉一樣
也許他們原來也是五彩斑斕
但為什麼他們變得長得像枯葉一樣呢
是因為有天擇的壓力
這個不是普通的麻雀 這個是波波
它不是普通的麻雀
那這個波波呢會吃枯葉蝶的祖先
在天擇的壓力之下呢
枯葉蝶就變成棕色的
因為波波呢它只會吃彩色的東西
它看到彩色的東西知道是蝴蝶
就把它吃掉
那看到棕色的東西呢
那個波波就覺得是枯葉就可以騙過它
所以枯葉蝶的祖先
在天擇的壓力之下呢
顏色就變成是棕色的
好但是波波呢也是會演化的
所以波波為了要吃到這些枯葉蝶呢
你有偽裝成枯葉的枯葉蝶呢
所以它也進化了
波波進化以後就是比比鳥這樣
這個是比比鳥 那比比鳥呢
它在判斷一個蝴蝶能不能吃的時候
是用比較高明的手段
它不會只看顏色 它會看它的紋路
它知道說沒有葉脈的是蝴蝶
有葉脈的才是真正的枯葉
在天擇的壓力之下
枯葉蝶就產生了擬態 產生了葉脈
想要騙過比比鳥
但是比比鳥它也有可能會再進化
比比鳥進化是什麼呢
比比鳥進化就是大比鳥啦
你知道嗎 這個就是大比鳥
那大比鳥可能可以分辨
這個枯葉蝶跟枯葉的不同
好 那這個是演化的故事
對應到GAN呢 枯葉蝶就是generator
那它的天敵呢就是discriminator
那現在我們generator要做的事情
是畫出二次元的人物
那generator怎麼學習畫出二次元的人物呢
它學習的過程是這樣子
第一代的generator它的參數幾乎是
它的參數完全是隨機的
所以它根本就不知道
要怎麼畫二次元的人物
所以它畫出來的東西就是一些
莫名其妙的雜訊
那discriminator接下來呢
它學習的目標是
要分辨generator的輸出
跟真正的圖片的不同
那在這個例子裡面可能非常的容易
對discriminator來說它只要看說
圖片裡面有沒有兩個黑黑的圓球
就是眼睛
有眼睛就是真正的二次元人物
沒有眼睛就是generator
產生出來的東西
好接下來generator
就調整它的裡面的參數
Generator就進化了
它調整它裡面的參數 它調整的目標
是為了要騙過discriminator
假設discriminator
判斷一張圖片是不是真實的依據
看的是有沒有眼睛
那generator就產生眼睛出來
給discriminator看
所以generator產生眼睛出來
然後他可以騙過第一代的
discriminator
但是discriminator也是會進化的
所以第一代的discriminator
就變成第二代的discriminator
第二代的discriminator
會試圖分辨這一組圖片
跟真實圖片之間的差異
它會試圖去找出這兩者之間的差異
舉例來說 它發現說
這邊產生的圖片都是比較簡單的
舉例來說都沒有頭髮也沒有嘴巴
那這些圖片是有頭髮的也有嘴巴
接下來第三代的generator
就會想辦法
去騙過第二代的discriminator
既然第二代的discriminator是看
有沒有嘴巴來判斷是不是真正的
二次元人物
那第三代的generator就會把嘴巴加上去
那discriminator也會逐漸的進步
它會越來越嚴苛
然後期待discriminator越來越嚴苛
Generator產生出來的圖片
就可以越來越像二次元的人物
那因為這邊有一個generator
有一個discriminator
它們彼此之間是會互動
那在最早啊這個GAN是
Ian Goodfellow propose的
14年這個GAN的paper呢
是發表在14年的arvix喔
那最早在這個GAN的原始的
paper裡面呢
把generator跟discriminator
當作是敵人
如果你有看很多網路文章的話
它都會舉例說
啊generator是假鈔的啊
然後discriminator是警察啊
警察要抓做假鈔的人啊
假鈔就會越來越像
警察就會越來越厲害等等
因為覺得generator
跟discriminator中間有一個
對抗的關係
所以就用了一個
adversarial這個字眼
Adversarial就是對抗的意思
但是至於generator跟discriminator
他們是不是真的在對抗呢
這只是一個擬人化的說法而已
甚至之前愚人節還有一個網路文章
就是寫說我們不可以虐待人工智慧
我們不可以讓人工智慧在鬥雞場裡面
彼此互相殘殺 這個是不道德的
我們應該要釋放這些generator
跟discriminator
好 那這樣是不是在對抗
其實就只是人類的比喻啦
那你也可以說他們其實是
亦敵亦友的合作關係
好 所以generator
跟discriminator的關係啊
用動畫來說就是寫作敵人唸做朋友
就跟進藤光還有塔矢亮一樣
或者是跟Naruto跟Sasuke一樣
那接下來就實際上從演算法來講一下
Generator跟discriminator
是如何運作的
那以下呢就是正式來講一下
這個演算法實際上是長什麼樣子
好generator跟discriminator
他們就是兩個network
那network在訓練前
你要先初始化它的參數
所以我們這邊就假設說
generator跟discriminator
它們的參數 都已經被初始化了
好 初始化完以後
接下來訓練的第一步是
定住你的generator
只train你的discriminator
那因為一開始你的generator的參數
是隨機初始化的
那如果你又固定住你的generator
那它根本就什麼事都沒有做啊
它的參數都是隨機的啊
所以你丟一堆向量給它
它的輸出都是亂七八糟的圖片
那其實如果generator參數
是初始化的話
你連這樣子的結果都產生不出來
那產生出來的就很像是電視機壞掉的
那一種雜訊
好那你從這個gaussian distribution裡面呢
去random sample一堆vector
把這些vector丟到generator裡面
它就吐出一些圖片 一開始這些圖片
會跟正常的二次元人物非常的不像
好那你會有一個database
這個database裡面
有很多二次元人物的頭像
這個去網路上爬個圖庫就有了
這個不難蒐集
那你從這個圖庫裡面呢
去sample一些
二次元人物的頭像出來
接下來你就拿真正的二次元人物頭像
跟generator產生出來的結果
去訓練你的discriminator
那discriminator
它訓練的目標是什麼呢
它訓練的目標是要分辨
真正的二次元人物
跟generator產生出來的二次元人物
它們之間的差異
講得更具體一點啊
你實際上的操作是這個樣子
你可能會把這些真正的人物都標1
Generator產生出來的圖片都標0
接下來對於discriminator來說
這就是一個分類的問題
或者是regression的問題
如果是分類的問題
你就把真正的人臉當作類別1
Generator產生出來的
這些圖片當作類別2
然後訓練一個classifier就結束了
或者是有人會把它當作
regression的問題
那你就教你的discriminator說
看到這些圖片你就輸出1
看到這些圖片你就輸出0
都可以 總之discriminator就學著
去分辨這個real的image
跟產生出來的image之間的差異
那 但是實際上怎麼做
你可以當作分類的問題來做
也可以當作regression的問題來做
那第二步我們訓練完
discriminator以後
接下來定住
discriminator改成訓練generator
怎麼訓練generator呢
比叫擬人化的講法是
我們就讓generator
想辦法去騙過discriminator
因為剛才discriminator
已經學會分辨
真圖跟假圖的差異
真圖跟生成的圖片的差異
Generator如果可以騙過
discriminator它可以產生一些圖片
Discriminator覺得
是真正的圖片的話
那generator產生出來的圖片
可能就可以以假亂真
那實際上這個欺騙這件事情
是怎麼操作的呢
它實際上的操作方法是這樣子
你有一個generator
generator吃一個向量作為輸入
從gaussian distribution sample
出來的向量作為輸入
然後產生一個圖片
接下來我們把這個圖片丟到
Discriminator裡面
Discriminator會給這個圖片
一個分數
那generator它訓練的目標
就Discriminator參數是固定的
我們只會調整generator的參數
Generator訓練的目標
是要Discriminator的輸出值
越大越好
那因為Discriminator
它本來訓練的時候
它訓練的目標它可以做的事情就是
看到好的圖片就給它大的分數
如果generator可以調整參數之後
輸出來的圖片Discriminator
會給予高分
那意味著generator產生出來的圖片
是比較真實的
或者是啊 講得更具體一點
實際上你的操作是這個樣子
Generator是一堆network
不是一堆network
是一個network裡面有好幾層
然後呢 Discriminator也是一個
network裡面有好幾層
我們把generator跟
Discriminator直接接起來
當做一個比較大的network來看待
舉例來說generator
如果是五層的network
Discriminator如果是五層的network
把它們接起來我們就把它當作是一個
十層的network來看待
而這個十層的network裡面
其中某一層啊
某一個hidden layer它的輸出很寬
它的輸出的這個dimension呢
就跟圖片裡面pixel的數目
乘三是一樣的
你把這個hidden layer的輸出呢
做一下整理以後 就會變成一張圖片
所以這整個大的network裡面
其中某一層的輸出就是代表一張圖片
那我們要做的事情是什麼呢
我們要做的事情是
整個巨大的network啊
它會吃一個向量作為輸入
然後他會輸出一個分數
那我們希望調整這個network
讓輸出的分數越大越好
但是要注意一下 我們不會去調
對應到Discriminator的部分
我們不會去調這個巨大
network的最後幾層
為什麼不調最後幾層呢
你可以想想看假設調最後幾層的話
這整個遊戲就被hack了
因為假設你要輸出的分數越大越好
我直接調最後output layer
那個neural bias
把它設成一千萬
那不是輸出就很大了嗎
所以Discriminator這邊的參數
是不能動的
我們只調generator的參數
好那這邊呢
至於怎麼調Generator的參數呢
這個訓練的方法啊
跟我們之前訓練一般的network
是沒有什麼不同的
我們之前說訓練network的時候就是
訂一個loss啊 然後你用gradient descent
讓loss越小越好
那這邊呢 你也有一個目標
只是這個目標呢不是越小越好
而是越大越好
那當然你也可以把這個目標
Discriminator output成一個負號
就當作loss嘛 對不對
你可以把Discriminator
output成一個負號當作loss
然後generator訓練的目標
就是讓loss越小越好
或者你也可以說
我們就是要讓Discriminator output
的值越大越好
然後我們用gradient ascent
不是gradient descent
gradient descent是
讓loss越小越好
gradient ascent會讓你的目標函數
越大越好
我們會用gradient ascent去調generator
讓Discriminator的輸出越大越好
這是同一件事
這邊訓練generator的方法
也是用gradient descent base的方法
跟我們之前在訓練一個
一般network的時候
是沒有什麼差異的
好 所以現在講了兩個步驟
第一個步驟 固定generator
訓練discriminator
第二個步驟
固定discriminator訓練generator
接下來呢 接下來就是反覆的訓練
discriminator跟generator
訓練完discriminator以後
固定住discriminator
訓練generator
訓練完generator以後
再用generator去產生更多的
新的產生出來的圖片
再給discriminator做訓練
訓練完discriminator以後
再去訓練generator
反覆的去執行
所以你是訓練一陣子discriminator
訓練一陣子generator
訓練一陣子discriminator
再訓練一陣子generator
Generator跟discriminator
它們是反覆的去進行訓練
當其中一種進行訓練的時候
另外一個就固定住
那你期待discriminator跟generator
都可以做得越來越好
好 那我們作業呢
其實下一個作業就是
要做動畫人物的人臉生成
那你可能會問說
到底可以做到什麼樣的程度呢
以下的結果是我在17年的時候做的
我自己試著train了一下GAN
看看GAN是不是真的可以產生
二次元的人物
好那我訓練了
我把那個generator呢
Update了一百次以後
所謂generator update 一百次
的意思是說
就是discriminator train一下
generator train一下
discriminator train一下
generator train一下
這樣往返一百次以後得到的結果
是這樣子 嗯 不知道在做些什麼
但我接下來呢就再等了一下
Train 一千次的
discriminator 跟generator
各自訓練這樣反覆一千次以後
機器就產生了眼睛
機器知道說 人臉就是要有兩個眼睛
所以它就把眼睛標上去
訓練到兩千次的時候
你發現嘴巴就出來了
訓練到五千次的時候
已經開始有一點人臉的樣子了
而且你發現說機器學到說
動畫人物啊
就是要有那個水汪汪的大眼睛
所以他每個人的眼睛呢
都塗得非常的大
塗有反白 代表說反光
是水汪汪的大眼睛
好 這個是訓練一萬次以後的結果
有發現形狀已經有出來了
只是有點模糊
很多地方有點暈開的感覺
好像是水彩畫的樣子
好接下來這個是
update兩萬次的結果
這個是update五萬次的結果
我後來就停在五萬次的地方
那其實你在作業裡面
是有機會做得比這個結果更好的
這個是助教是學生的時候做的結果啦
那如果是最好
可能可以做到這個樣子
那你會發現說這些人物呢都還不錯
只是有一些比較
還是會有偶爾會有一些崩壞啦
但乍看之下呢可能比一些作畫畫風
會崩壞的動畫公司
比如說一些妹非妹做的還要好一些了
那其實啊 如果你有好的資料庫的話
那當然我們提供給大家的資料
是做不到這個地步的啦
如果你有真的非常好的資料的話
也許你可以做出真的很好的結果
我在網路上呢
找到了一個這樣子的結果
這個是用StyleGAN做的
那用StyleGAN做起來
可以做到這個樣子
我覺得非常驚人喔
很驚人喔 這些都是
用GAN產生出來的人物
這邊他還產生了異色瞳
我不知道算是畫錯呢還是它特意呢
要產生異色瞳
對異色瞳
就一眼白眼一眼血輪眼這樣子的概念
好那除了產生動畫人物以外
當然也可以產生真實的人臉
有一個技術叫做progressive GAN
它可以產生非常高清的人臉
好這邊考一下大家啦
這邊有兩排人臉
你覺得上面這一排
是機器產生的請舉手
好有一些同學 好手放下
你覺得下面這一排
是機器產生的請舉手
好比較多 手放下
其實上下兩排都是機器產生的
好所以這個顯然progressive GAN
它有辦法產生以假亂真的人臉
甚至之前啊 你不知道我有聽
有一個新聞我不知道是不是真的
有一個新創公司 它裡面有很多人
但大家發現裡面那些人的頭像
有點怪怪的
有人說那些頭像其實
是用GAN生成的
那並不是真正的人物
那個公司沒有那麼多人
用GAN呢生成一些假人的照片
當作是假員工
那你可能會問說要產生人臉
有什麼用呢 我去路邊拍一個人
產生出來的照片不是更像真的嗎
但是用GAN你可以產生
你沒有看過的人臉
舉例來說用GAN
你可以做到這樣子的事情
我們剛才說GAN這種generator
就是輸入一個向量 輸出一張圖片
那你不只可以輸入一個向量
輸出一張圖片
你還可以把輸入的向量
做內插 做interpolation
把輸入的向量做內插以後
會發生什麼事呢
你就會看到兩張圖片之間連續的變化
舉例來說你輸入一個向量
這邊產生一個看起來非常嚴肅的男人
你輸入一個向量
這邊產生一個笑口常開的女人
那你輸入這兩個向量中間的
interpolation它的內插
你就看到這個男人逐漸的笑了起來
或者是呢這邊有更多的例子
你輸入一個向量
這個輸入的向量這邊是假的啦
但這邊產生出來的圖片是真的
你輸入一個向量
這邊產生一個往左看的人
你輸入一個向量
這邊產生一個往右看的人
你把往左看的人跟往右看的人
做interpolation會發生什麼事呢
機器並不是傻傻地
把兩張圖片疊在一起
變成一個雙面人
而是機器知道說
往左看的人臉跟往右看的人臉
介於他們中間的就是往正面看
你在訓練的時候其實並沒有真的告訴
機器這件事 但機器可以自己學到說
把這兩張臉做內插
應該會得到一個往正面看的人臉
好那說到GAN哪 剛才已經講過說
GAN是Ian Goodfellow
在14年的時候提出來的
你可能有聽過那個故事是
這不知道是不是真的啦一個傳說
Ian Goodfellow去酒吧
看到兩個人吵架
於是就有了GAN的靈感
然後呢回家第一次實作
就成功了這樣 然後就結束
然後就投了一個paper
那但是他所謂的成功啊
其實是長這個樣子的
在14年的時候
我第一看到這個結果的時候
我覺得哇靠還真的可以產生圖片
太厲害了
當然如果從今天的角度來看
你會覺得說 這樣你也算是有成功嗎
今天比如說你用
BigGAN產生出來的圖片
可以做到像這個樣子
這些圖片都是機器生成的
當然仔細看一下
還是可以發現一些破綻
舉例來說這隻狗 牠多了一個腳啊
或者是這個杯子
它左右沒有很對稱啊
它有點歪歪的
但這些圖片都是機器生成的
那有時候機器
也會產生一些幻想中的角色
舉例來說機器就產生了一個網球狗啊
