臺灣大學人工智慧中心 科技部人工智慧技術暨全幅健康照護聯合研究中心 http://ai.ntu.edu.tw/
大家好，我是負責講 Adversarial Attack 的助教 黃冠博
這個是我們今天的 outline
我們今天要講的東西主要分成兩部分
第一部分是關於影像上面的一些 attack
再來第二部分是關於語音上面的一些 attack
在圖像上面我們會帶大家看一下
one pixel attack 他是在做什麼東西
然後我們會講到 one pixel attack 他需要用到的 differential evolution
在音訊方面我們會講三個東西
前面兩個分別是講 ASR 的 attack 跟 ASV 的 attack
ASR 他就是一個語音辨識的系統
那我們要對他做一些攻擊
ASV 他就是疑者辨識的系統
那我們一樣也可以對他攻擊
不過這兩個 attack 我們並不會細講
因為他的概念其實跟圖像還蠻像的
那最後一個也是我們今天的一個很大的重點
叫做 Hidden Voice Attack
然後我們會帶大家看一下這個 Hidden Voice Attack 到底能做到一些什麼樣的事情
首先我們要帶大家看一下
Attack 在影像上面的一些東西
在講之前我們先幫大家複習一下老師之前上課的影片
這邊有一隻貓的圖片
他原本能被機器正確的辨識成一隻貓
然而我們加了一些東西
這個東西就叫做 perturbation
等於說我們在原本這張貓的圖片上面加了一些雜訊
加了這些雜訊之後我們一樣再餵進原本的 model
這個 model 就會因此被這些雜訊所干擾
然後進而預設出一個可能不是貓的東西
那這樣子我們就成功的 attack 這個 model
另外要跟大家介紹一個很不一樣的 attack
他叫做 one pixel attack
我們先不管他是怎麼辦到的
但是你可以從他的名字上去聽出來說
這個 attack 的東西就是一張圖片的其中一個 pixel
你可以看到左邊這張圖
那個紅色框框有匡了一個小小的黑點
那個點就是他 attack 的 pixel
然後右邊的這張圖片
紅色框框裡面有一個紅色的點
那個也是他 attack 的 pixel
如果今天把這個紅色的框框拿掉
我相信大部分的人根本就看不出來
這張圖片是有被動過的
這個就是 one pixel attack 他非常非常厲害的地方
他那個 pixel attack 的那個值
也就是說他 pixel 的顏色
如果很巧妙地跟背景的顏色相差不多的話
我們人眼是真的很難很難看見的
這邊要帶大家看一下 one pixel attack
他跟我們平常熟悉的一般的 attack 他的差別到底在哪裡
這張圖片呢
中間兩個 16*16 的表格
就是我們在 attack 一張圖片的時候所加上去的 perturbation
你可以看到一般的 attack 他裡面有很多個非零的數字
那我們的目標就是讓原本的這個圖片
加上這個 perturbation 之後
能夠讓我們 attack 的那個 class 的機率最高
意思就是說，假如說我原本的
圖片叫做 cat
那我希望他被錯誤辨識成一隻狗的時候
那我就會希望說我加入這個 perturbation
我讓他被辨識成狗
的這個類別的機率能夠最高
那我們這個 attack 當然得給他一些限制
如果沒有這個限制的話
那我們就乾脆把每張圖片改成黑色的
那他當然什麼都辨識不出來
我們這個限制他的最終目的就是希望說
我們人眼看到的這個 perturbation
也沒有辦法分辨出來他跟原圖的差異
因此我們才會給個限制說
可能這個 perturbation 他的大小不能超過 L
或者是他的 L infinity norm 必須要小於某個值
那 infinity norm 是什麼呢？我相信大家應該也很熟悉
他就是取這個格子裡面最大的那個值
像這邊的這個例子
左邊這個 perturbation 他的 L infinity norm 就是 42
好那我們再看一下右邊的 one pixel attack
one pixel attack 你可以看到
這十六個格子裡面只有一格不是零
其他都要是零
這個就是 one pixel attack 的特性
你要 attack 這張圖片可以，但是你就是只可以動其中一個 pixel
那他的目標一樣
就是希望你動這個 pixel 之後
你要攻擊的那個 target 的那個 class
他被 predict 成那個 target class 的機率愈大，愈大愈好
那他的限制就當然跟我們一般的 attack 不一樣
他就是希望你的 L0 norm 必須要小於某個值
那 one pixel attack 的話就是規定說
那個 d 必須要等於 1，也就是說你只能動其中一個 pixel
這邊就帶大家看幾個 one pixel attack 的例子
這邊有四張圖然後他每個圖片都用一個 pixel 來 attack
那那個 pixel 他也用紅色的圈圈幫你圈起來
免得你找不到
這邊要再更詳細跟大家說
one pixel attack 他到底是什麼東西
我們這邊會跟大家講說他在 untargeted attack 跟 target attack 他不一樣的地方
像我們剛剛這頁講的都是 target attack
那我們等下會講一下 untargeted attack 是要幹嘛
我們先看 one pixel attack
他詳細的定理
首先 x 是一個 n-dimensional 的 input
那你其實就可以把 x 想像成你要攻擊的那張圖片
那 f 就是我們的 image classifier
那你可以把他想像成是我們的 model 他產生出來的 output
過 softmax 之後的值
那 ft 就是我們給定 input x
那這個 model 他認為這個 input x 也就是你給他的那張圖片
是屬於 t 這個 class 的機率
那這個 e 就是我們剛剛上上頁看到的那張perturbation
也就是我們給那張圖片加上的雜訊
那我們先來看一下他的 untargeted attack 跟 target attack
我們先看右邊的 target attack 也就是我們剛剛所講的
我們在將一張圖片加入雜訊之後
假如說我們希望
我們讓他被錯誤辨識成 adv 這個 class
好那我們希望這張加入雜訊之後的圖片
被這個 f 判定成是 adv 這個 class 的機率愈高愈好
好那我們再看一下 untargeted attack
這個 untargeted attack 跟 target attack 不太一樣的點就是說
假設原本這個 x
也就是我們 input 的這張圖片，他原本的 class 就應該是 t
好那我們加上雜訊之後
我們就會希望這個 model 看過這張圖片之後
他認為這張圖片是屬於 t 這個 class
的機率愈小愈好
同學可以再仔細回想一下
好那這個 one pixel attack
當然他最重要的限制還是說
你的 L0 norm 必須要是 1
也就是說你這個 perturbation 裡面
只可以有一格，也就是只有一個 pixel 的 perturbation
可以是非零，其他都必須要是零
好那我們這邊要帶大家看一下說
我們要如何決定是哪一個 pixel 必須要被攻擊 然後那個 pixel 的雜訊的值要給多少
這邊一個最直觀的方法就是說，那為什麼我不把每個 pixel
跟 0~255 的值都試一遍，這樣我總有一天可能會試到一個可以成功 attack 的 pixel
好那我們這樣想一下，如果今天有一張圖片他是 224*224
那這樣光是 pixel 就有五萬多個
這還不包括我們剛剛講的每個 pixel 你還要去試
0~255 的值
你每試一組
就是一個 pixel 然後跟對應的雜訊值你就必須要丟進 model 裡面
去測一下說有沒有 attack 成功
那這樣做五萬次真的要非常非常非常久
一張圖片甚至做上好幾個小時都是有可能的
那我們現在大家來想一件事情
就是說我們真的需要最好的 perturbation 嗎
我們這邊指的最好的 perturbation 就是我們前幾頁講的就是說
我們一定要想方法讓那個 f 的機率最大
或是最小
我們真的有需要嗎？還是說其實我們只要剛好攻擊成功就好
你可以看到這張圖片
像左上角的那個杯子
原本他被認為是杯子的分數只有16.48
那我今天只要想辦法找到一個 pixel
那這個 pixel 如果他被那個 f 也就是那個 classifier
認定他是 soup bowl
的分數比 cup 還要高
那這樣子就好了
那這樣子就是攻擊成功
我們今天不需要說我們一定要想辦法找一個 pixel
能讓 soup bowl 的分數逼近 100%
然後讓 cup 的分數非常非常低
我們不需要
當然如果硬是要這樣子也是可以
但是我們今天不需要，我們是需要攻擊成功就好
所以這邊才會問說，那我們真的需要那個最好的 pertubation 嗎
那其實也是不用啦
我們只要一個能夠剛好攻擊的 pertubation
那為什麼我們會這樣講呢？因為接下來我們要跟大家介紹的
一個其實還算不錯的演算法
能夠找到一個不錯的解
但是他沒有辦法那個是最佳解，那個演算法
他叫做 differential evolution
今天要跟大家介紹一個
能夠找出一個 pixel 的演算法
他叫做 differential evolution
他的概念大概是這個樣子
在每個 iteration 他都會產生一組 candidate 的 solution
可以把這些 candidate 的 solution 都當作是小孩
那這些小孩他在下個 iteration 的時候會變成父母
他變成父母之後他一樣會產生新的小孩
那這邊產生新的小孩如果沒有比父母好
就會被丟掉
然後那個父母的值就會被延續到下一個
當然我們希望這樣最後能找到一個最好的小孩
那如果不是最好的也沒關係，其實只要夠好就可以
這就是為什麼我們說我們其實不需要找到那個最好的 pertubation
因此我們就用這個 differential evolution
畢竟這個演算法他沒有辦法保證一定可以找到最佳解
但是通常只要做夠多次，那個解就會夠好
那當然我們剛才是說我們不需要找到那個最好的解
但如果靠這個 differential evolution，如果他可能運氣很好，不小心找到那個最佳解
那當然更好
對
那接下來我們要帶大家實際了解一下這個 differential evolution 他到底是在做什麼
這邊呢
google pixel attack 他原本的 paper是有給出一個 differential evolution 一個還蠻詳細的說明這樣
那這個說明跟我們剛才講的其實差不多啦
並不是每個 iteration 都會產生一個小孩
那小孩是下個 iteration 的父母
如果這些小孩比父母還要好的話，那他就會被留下來這樣子
那這邊比較一個重要的點大家必須要知道的就是說
那些小孩什麼的他們在產生的時候，多多少少有一點隨機的成分
也就是說我不會不小心就陷入一個 local optimum
然後跳不出來
因為他畢竟還是希望能夠找到一個 global optimum
那這個的話因為他總有一些隨機的成分
那所以說他會比較有機會
找到一個比較好的解
那我們等下會帶大家看一下說那個隨機的成分到底是在哪裡
這邊我們要來介紹一下關於 differential evolution 的一些好處
那第一點跟我們剛剛講的還蠻像的
就是說因為這個演算法裡面有一些隨機性
那你今天如果找不到一個 local optimum
我們在裡面走，走了半天
還是有機會可以跳出來
然後去找到一個更好的解
那我們當然會希望說，讓這個 differential evolution
能夠找到 global optimum 當然是最好
但是如果沒有找到，他找到的那個解，他的那個品質
跟分數大概也不會跟 global optimum 差太多
好那第二個好處是一個非常非常重要的性質
相比 FGSM，這個 differential evolution 他不需要去算 gradient
他不需要算 gradient 可以幹嘛
你不需要算 gradient，你其實就不太需要知道你攻擊對象 model 裡面的所有細節
今天這個 model 有可能是 resnet，有可能是 densenet
或是一些其他簡單的 convolution 或是一些很複雜的架構，都沒有關係
因為你這個 differential evolution 不需要去算 gradient
也就是說今天各種各式各樣的 classifier 我都可以拿去攻擊
在仔細介紹 differential evolution 之前
我們先讓大家看一下，他整體來說，大概需要做些什麼東西
第一步必須要先生成一些最一開始的 candidate
有了這些 candidate 之後，再來我們要選幾個 candidate
然後根據這些 candidate 做一些運算
然後再利用這些 candidate 去生新的 candidate
生出新的 candidate 之後
我們要測試這些新生出來的 candidate 好不好
如果好的話，這些新的 candidate 就會被拿去取代原本舊的 candidate
然後接下來我們就一直重複後面兩個步驟
直到我們覺得次數夠多了
現在我們要講 differential evolution 他的第一個步驟
如何生新的 candidate
好首先我們舉一個比較簡單的例子
現在有一個 f(x)
他將 vector x 的每個分量平方之後
加總取平均
那我們現在的目標我們就是要找一個 vector x
能夠讓 f(x) 愈小愈好
首先我們隨機生成十個像這樣的 vector
這個每個 vector 他都是四維的向量
然後這個 vector 裡面的每個數字都是介於 0~1 之間的小數
剛剛我們在生完十組 vector 之後
我們要把這十組 vector 都投影到正負五之間
然後再丟進 f 裡面去做計算
那我們舉第一個 vector 為例子
-4.06 的平方加上 -4.89 的平方加上 -1 的平方
加上 -2.87 的平方
再把這些平方加起來除以 4 我們可以得到 12.39 多
到這邊我們前面 initialize candidate 的部分就算是完成了
再來我們要講第二部分
我們選擇一些 candidate 然後再根據這些 candidate 去生出新的 candidate
這個是我們剛剛生的新的 candidate
不過要注意的是，這個是我們生 candidate 時，還沒有投影到正負五之間的那十個 candidate
好首先我們以第一個向量當作 target vector
接下來我們會生一個新 candidate
來看看這個新的 candidate 他帶入 f 之後的值
會不會比較小
我們這邊指的比較小就是
相比 target vector 帶進 f 的那個值
現在我們要做一件事情
我們要從剛剛的那十個 candidate 裡面
隨機取出三個 candidate 出來
那當然我們剛剛選的那個第一個 target vector
他不能是這三個 candidate 的其中一個
也就是說我必須要從那剩下的 9 個 vector 挑 3 個出來
接下來，挑完那三個 vector 之後，我們將其中的兩個 vector 相減
乘上一個 mutation vector
再加上另外一個 vector
這個就是我們得到的初步的新 candidate
這個新 candidate
我們要確保他介於零到一之間
也就是說小於零的數值我們就直接把它當作零
那大於一的數值我們就直接把它當作一
所以說經過我們 clip 他到零到一之間之後
這個最終的新 candidate 就會是長現在是這樣子
然後我幫你把我們剛剛選的 target vector 附在旁邊
我們等下需要用到，我們需要拿他做一些對照
好我們得到這個新 candidate 之後
要注意的是我們並非會保留 candidate 裡面所有的數字
我們必須要決定說
candidate 當中的哪些數字要丟掉
然後哪些數字可以將 target 裡面的數字替換掉
那要怎麼決定 target vector 的哪些值會被 candidate 對應位置的值替換掉呢
我們在下一頁會做講解
這邊要跟大家講一個叫做 crossp 的東西
這個 crossp 其實就是一個介於零到一之間的小數
那我們今天就隨便 random 出一個四維的向量
我們就記錄說這個四維向量裡面的四個數字是否小於 crossp
那如果有的話我們就設那個對應位置是 true
如果沒有的話我們就把那個對應位置設成是 false
那今天的這個例子當中我們得到一個 array，他是 false true false true
這個 false true 代表什麼意思呢
如果是 false 代表 candidate 對應的那個位置的值會被丟掉
那反之如果是 true 的話，代表 candidate 對應的那個位置的值會被留下來
那什麼是丟掉什麼是留下來
你可以看這個是我們在丟掉或跟留下來裡面數值之後的結果
你可以看一下上一頁的 target vector
你就可以看到說像我們這邊第一個跟第三個是 false
所以說 candidate 的第一個跟第三個的值並不會被取用
並不會被取用的意思就是說那我們就是保留 target 的第一個跟第三個的值
所以可以看到說我們這個最終的新的 candidate
的第一個跟第三個是跟我們 target vector 裡面的第一個跟第三個是一樣
那 true 我們剛才說是要保留 candidate 的對應位置的值
candidate 的第二個跟第四個是 1 跟 0.17
這兩個值我們就會把他留下來
所以說可以看到說這個新 candidate 的第二個跟第四個值分別是 1 跟 0.17
這個就是如何保留我們新 candidate 當中的值
當然我們要這樣做的原因就是我們不希望
我們直接把 target vector 裡面每一個值直接替換掉
因為如果這樣子的話
可能原本 target vector 裡面有幾個值
是對我們最後要解的 solution 來說是好的、是有用的
而如果我們把 target 裡面所有的值丟掉
那裡面的一些好的值就不會被留下來
我們剛剛利用舊的 candidate 生出新的 candidate 之後
我們就需要測試一下這個新 candidate 他到底好不好
那如果這個新的 candidate 好的話
我們就用這個新的 candidate 去取代我們原本有的 target vector
那如果沒有的話，我們的 target vector 就會被留下來
我們現在生出了一個新 candidate
新 candidate 就是剛剛這一頁最下面那個 0.091, 0.4, 0.71 這個 candidate
好那我們接下來要做的就是
原本介於 0~1，現在投影到正負五之間
然後我們再將他帶入 f 得到一個數值
如果這個數值比原本 target vector 帶入 f 的數值還來的小的話
我們就用這個新的 candidate 取代原本的 target vector
但是如果這個數值比原本 target vector 帶入 f 的數值還要來得大的話
這個 candidate 就會被丟掉
那我們剛剛就是其實在做白工
我們剛剛在做完這些事情之後
接下來我們要做的就是要來選下一個 target vector
然後再重複後面這個第二跟第三的步驟
這兩個步驟他會被重複很多次
我們假如說可能就設定說他做五十次
我們就期待他在五十次的時候
會生出一個還不錯的 solution
我們剛剛講完 differential evolution 的一個簡單的例子
因為我們剛剛是隨便找一個四維的 vector 來當作我們的 input 這樣
那你可能問說
differential evolution 到底要怎麼真正套用在我們 one pixel attack 裏
我們再回顧一下，我們 one pixel attack
他是給一張圖片然後產生一個只有一個 pixel 是非零的 perturbation
然後我們希望我們滿足
我們 target attack 或 target attack 的目標
那你可能會想說，如果我們剛剛隨機生成 vector 就是我們的 perturbation 的話
你可能會，大家可能都會有個疑問就是說
可是我們剛剛不是有規定說，one pixel attack 只能動一個 pixel 嗎
那你這樣每個 vector 裡面，假設說我今天圖片是 10*10 好了
那我生一個 100 維的 pixel
那這樣我不是最終還是只能有一個 pixel 是非零的數字嗎
那我這邊 random 算老半天，那其他那幾個也不一定都是零
那這樣 differential evolution 真的可以用嗎
好我等下跟大家講說，這個 differential evolution 到底是怎麼應用在 one pixel attack 上面
其實實際上他並不是把剛剛的那個 differential evolution 裡面的那個 vector 直接當作是一個圖片
我們要知道一個 image 他其實是有 R,G,B 三個 channel
那接下來還有一個東西非常非常重要
就是我們其實剛剛的那些 input 並不是圖片
你可以把他想像成這樣子
我們今天其實就只需要動一個 pixel
那我們就這樣，把這個 pixel 的 x 座標跟 y 座標，我們也都把他當作一個變數
然後我們再加上我們需要的這個 R,G,B 的分別是 0~255 的值
這樣子我們就會得到一個像下面這樣寫的 x, y, r , g ,b 這五個變數
這個就是我們剛剛所生的 vector
意思就是說我們剛剛是生 4 個 vector
那我們今天在 one pixel attack 我們就是生一個五維的 vector
那這個五維分別就是你要攻擊的那個 pixel 的 x 座標跟 y 座標
以及那個 pixel 裡面對應的 r,g,b 值
我們這邊再給大家看幾個例子
那紅色框框一樣都是我們攻擊後的 pixel 的 perturbation
好那我們現在來想一件事情
假如說有不同大小的圖片
那我 differential evolution 跑的次數都是一樣的情況下
我們每次也是生一樣的 candidate 的數量
好那這樣子我們攻擊的成功率
跟圖片大小有什麼關係呢
其實你可以想像一下
你 iteration 跟你每次生的 candidate 的量其實可以當作你努力的程度
你用相同的努力程度
去對不同大小的東西來找東西的時候
你其實可以想像你在這個比較大的空間裡面
你要找到的那個 pixel 應該會比較難找
這就好像你同樣是你有一把鑰匙
放在一個小房間跟一個大房間
假如說這個小房間跟大房間的亂度都差不多
那勢必你可能在大房間裡面你要找比較久
好那根據實驗跑出來的結果
也真的是這樣子
你在同樣的 iteration 跟 candidate 數量的情況下
當你圖片愈大，你攻擊的成功率的確也會慢慢地逐漸下降
